{"name": "test_login", "status": "broken", "statusDetails": {"message": "requests.exceptions.InvalidHeader: Value for header {Cookie: {'Cookie': 'cipp_heze_server_sessionid=me8pgacuqv6igihttiqwn9mxpedluq67; Domain=.parkone.cn; HttpOnly; Path=/'}} must be of type str or bytes, not <class 'dict'>", "trace": "header = ('Cookie', {'Cookie': 'cipp_heze_server_sessionid=me8pgacuqv6igihttiqwn9mxpedluq67; Domain=.parkone.cn; HttpOnly; Path=/'})\n\n    def check_header_validity(header):\n        \"\"\"Verifies that header value is a string which doesn't contain\n        leading whitespace or return characters. This prevents unintended\n        header injection.\n    \n        :param header: tuple, in the format (name, value).\n        \"\"\"\n        name, value = header\n    \n        if isinstance(value, bytes):\n            pat = _CLEAN_HEADER_REGEX_BYTE\n        else:\n            pat = _CLEAN_HEADER_REGEX_STR\n        try:\n>           if not pat.match(value):\nE           TypeError: expected string or bytes-like object\n\n.venv\\lib\\site-packages\\requests\\utils.py:939: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nlogin_user_1 = 'cipp_heze_server_sessionid=me8pgacuqv6igihttiqwn9mxpedluq67; Domain=.parkone.cn; HttpOnly; Path=/', get_user_1 = 200\n\n    def test_login(login_user_1,get_user_1):\n        cookies=login_user_1\n        print(cookies)\n        cookie = {\"Cookie\":cookies}\n        b=get_user_1\n        payload = {\n            \"email\": '834737865@qq.com',\n            \"permission_groups\": ['7b447ab459aa11edb9e60242ac130014'],\n            \"realname\":\"wangliyan3\",\n            \"remarks\":\"\",\n            \"telephone\":\"18740084256\",\n            \"username\":\"wangliyan5\"\n        }\n        header = {\n            \"Content-Type\": \"application/JSON;charset=UTF-8\",\n            \"Cookie\":cookie\n        }\n>       res = user.add_user(json=payload, headers=header)\n\ntestcases\\test_01.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi\\user.py:38: in add_user\n    return self.post(\"/users\", **kwargs)\ncore\\rest_client.py:16: in post\n    return self.request(url, \"POST\", data, json, **kwargs)\ncore\\rest_client.py:37: in request\n    return requests.post(url, data, json, **kwargs)\n.venv\\lib\\site-packages\\requests\\api.py:116: in post\n    return request('post', url, data=data, json=json, **kwargs)\n.venv\\lib\\site-packages\\requests\\api.py:60: in request\n    return session.request(method=method, url=url, **kwargs)\n.venv\\lib\\site-packages\\requests\\sessions.py:510: in request\n    prep = self.prepare_request(req)\n.venv\\lib\\site-packages\\requests\\sessions.py:453: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n.venv\\lib\\site-packages\\requests\\models.py:314: in prepare\n    self.prepare_headers(headers)\n.venv\\lib\\site-packages\\requests\\models.py:448: in prepare_headers\n    check_header_validity(header)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nheader = ('Cookie', {'Cookie': 'cipp_heze_server_sessionid=me8pgacuqv6igihttiqwn9mxpedluq67; Domain=.parkone.cn; HttpOnly; Path=/'})\n\n    def check_header_validity(header):\n        \"\"\"Verifies that header value is a string which doesn't contain\n        leading whitespace or return characters. This prevents unintended\n        header injection.\n    \n        :param header: tuple, in the format (name, value).\n        \"\"\"\n        name, value = header\n    \n        if isinstance(value, bytes):\n            pat = _CLEAN_HEADER_REGEX_BYTE\n        else:\n            pat = _CLEAN_HEADER_REGEX_STR\n        try:\n            if not pat.match(value):\n                raise InvalidHeader(\"Invalid return character or leading space in header: %s\" % name)\n        except TypeError:\n            raise InvalidHeader(\"Value for header {%s: %s} must be of type str or \"\n>                               \"bytes, not %s\" % (name, value, type(value)))\nE           requests.exceptions.InvalidHeader: Value for header {Cookie: {'Cookie': 'cipp_heze_server_sessionid=me8pgacuqv6igihttiqwn9mxpedluq67; Domain=.parkone.cn; HttpOnly; Path=/'}} must be of type str or bytes, not <class 'dict'>\n\n.venv\\lib\\site-packages\\requests\\utils.py:943: InvalidHeader"}, "attachments": [{"name": "log", "source": "81aafd7d-d5f4-49ef-af26-b134c1196030-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "bd32fe1d-cee5-4203-a385-ad0f2577c51f-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "173a051a-490d-41ab-9f53-37f41114b3b9-attachment.txt", "type": "text/plain"}], "start": 1722558935887, "stop": 1722558935889, "uuid": "30c3bd28-3868-47a5-8044-f460778ffbe5", "historyId": "b9ce00cfe2210bb9aabb3ffe9d8d4d05", "testCaseId": "83fcd9480974c850c0e6a071e6bf7cd2", "fullName": "testcases.test_01#test_login", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_01"}, {"name": "host", "value": "DESKTOP-DVLO8G1"}, {"name": "thread", "value": "6068-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_01"}]}